;  ASM code generated by mikroVirtualMachine for PIC - V. 8.2.0.0
;  Date/Time: 9/14/2014 5:51:53 PM
;  Info: http://www.mikroe.com


; ADDRESS	OPCODE	ASM
; ----------------------------------------------
$0000	$2999			GOTO	_main
$01A0	$	_Delay_22us:
;delays.c,15 :: 		void Delay_22us() {
;delays.c,16 :: 		Delay_us(22);
$01A0	$300E			MOVLW	14
$01A1	$1303			BCF	STATUS, RP1
$01A2	$1283			BCF	STATUS, RP0
$01A3	$00FA			MOVWF	STACK_10
$01A4	$0BFA			DECFSZ	STACK_10, F
$01A5	$29A4			GOTO	$-1
$01A6	$0000			NOP
;delays.c,17 :: 		}
$01A7	$0008			RETURN
$0054	$	_Mul_16x16_S:
$0054	$1303			BCF	STATUS, RP1
$0055	$1283			BCF	STATUS, RP0
$0056	$01FB			CLRF	STACK_11
$0057	$01FA			CLRF	STACK_10
$0058	$01F9			CLRF	STACK_9
$0059	$3080			MOVLW	128
$005A	$00F8			MOVWF	STACK_8
$005B	$01FD			CLRF	STACK_13
$005C	$1FF1			BTFSS	STACK_1, 7
$005D	$2864			GOTO	$+7
$005E	$09F1			COMF	STACK_1, F
$005F	$09F0			COMF	STACK_0, F
$0060	$0AF0			INCF	STACK_0, F
$0061	$1903			BTFSC	STATUS, Z
$0062	$0AF1			INCF	STACK_1, F
$0063	$0AFD			INCF	STACK_13, F
$0064	$1FF5			BTFSS	STACK_5, 7
$0065	$286C			GOTO	$+7
$0066	$09F5			COMF	STACK_5, F
$0067	$09F4			COMF	STACK_4, F
$0068	$0AF4			INCF	STACK_4, F
$0069	$1903			BTFSC	STATUS, Z
$006A	$0AF5			INCF	STACK_5, F
$006B	$0AFD			INCF	STACK_13, F
$006C	$0CF1			RRF	STACK_1, F
$006D	$0CF0			RRF	STACK_0, F
$006E	$1C03			BTFSS	STATUS, C
$006F	$2879			GOTO	$+10
$0070	$0874			MOVF	STACK_4, W
$0071	$07F9			ADDWF	STACK_9, F
$0072	$0875			MOVF	STACK_5, W
$0073	$1803			BTFSC	STATUS, C
$0074	$0F75			INCFSZ	STACK_5, W
$0075	$07FA			ADDWF	STACK_10, F
$0076	$1803			BTFSC	STATUS, C
$0077	$0AFB			INCF	STACK_11, F
$0078	$1003			BCF	STATUS, C
$0079	$1FF0			BTFSS	STACK_0, 7
$007A	$2881			GOTO	$+7
$007B	$0874			MOVF	STACK_4, W
$007C	$07FA			ADDWF	STACK_10, F
$007D	$1803			BTFSC	STATUS, C
$007E	$0AFB			INCF	STACK_11, F
$007F	$0875			MOVF	STACK_5, W
$0080	$07FB			ADDWF	STACK_11, F
$0081	$0CFB			RRF	STACK_11, F
$0082	$0CFA			RRF	STACK_10, F
$0083	$0CF9			RRF	STACK_9, F
$0084	$0CF8			RRF	STACK_8, F
$0085	$1C03			BTFSS	STATUS, C
$0086	$286C			GOTO	$-26
$0087	$1C7D			BTFSS	STACK_13, 0
$0088	$2894			GOTO	$+12
$0089	$09FB			COMF	STACK_11, F
$008A	$09FA			COMF	STACK_10, F
$008B	$09F9			COMF	STACK_9, F
$008C	$09F8			COMF	STACK_8, F
$008D	$0AF8			INCF	STACK_8, F
$008E	$1903			BTFSC	STATUS, Z
$008F	$0AF9			INCF	STACK_9, F
$0090	$1903			BTFSC	STATUS, Z
$0091	$0AFA			INCF	STACK_10, F
$0092	$1903			BTFSC	STATUS, Z
$0093	$0AFB			INCF	STACK_11, F
$0094	$087B			MOVF	STACK_11, W
$0095	$00F3			MOVWF	STACK_3
$0096	$087A			MOVF	STACK_10, W
$0097	$00F2			MOVWF	STACK_2
$0098	$0879			MOVF	STACK_9, W
$0099	$00F1			MOVWF	STACK_1
$009A	$0878			MOVF	STACK_8, W
$009B	$00F0			MOVWF	STACK_0
$009C	$0000			NOP
$009D	$0008			RETURN
$01BE	$	_PWM1_Init:
$01BE	$1303			BCF	STATUS, RP1
$01BF	$1283			BCF	STATUS, RP0
$01C0	$0195			CLRF	CCPR1L, 1
$01C1	$1217			BCF	CCP1CON, 4
$01C2	$1297			BCF	CCP1CON, 5
$01C3	$0008			RETURN
$01B8	$	_PWM2_Init:
$01B8	$1303			BCF	STATUS, RP1
$01B9	$1283			BCF	STATUS, RP0
$01BA	$019B			CLRF	CCPR2L, 1
$01BB	$121D			BCF	CCP2CON, 4
$01BC	$129D			BCF	CCP2CON, 5
$01BD	$0008			RETURN
$0110	$	_Adc_Read:
$0110	$1303			BCF	STATUS, RP1
$0111	$1283			BCF	STATUS, RP0
$0112	$019F			CLRF	ADCON0, 1
$0113	$30C0			MOVLW	192
$0114	$049F			IORWF	ADCON0, 1
$0115	$1683			BSF	STATUS, RP0
$0116	$171F			BSF	ADCON1, 6
$0117	$179F			BSF	ADCON1, 7
$0118	$1283			BCF	STATUS, RP0
$0119	$0826			MOVF	FARG_Adc_Read+0, 0
$011A	$00F0			MOVWF	STACK_0
$011B	$0DF0			RLF	STACK_0, 1
$011C	$1070			BCF	STACK_0, 0
$011D	$0DF0			RLF	STACK_0, 1
$011E	$1070			BCF	STACK_0, 0
$011F	$0DF0			RLF	STACK_0, 1
$0120	$1070			BCF	STACK_0, 0
$0121	$0870			MOVF	STACK_0, 0
$0122	$049F			IORWF	ADCON0, 1
$0123	$141F			BSF	ADCON0, 0
$0124	$21A0			CALL	_Delay_22us
$0125	$151F			BSF	ADCON0, 2
$0126	$	L_Adc_Read_0:
$0126	$1D1F			BTFSS	ADCON0, 2
$0127	$292A			GOTO	L_Adc_Read_1
$0128	$0000			NOP
$0129	$2926			GOTO	L_Adc_Read_0
$012A	$	L_Adc_Read_1:
$012A	$101F			BCF	ADCON0, 0
$012B	$3008			MOVLW	8
$012C	$00F2			MOVWF	STACK_2
$012D	$081E			MOVF	ADRESH, 0
$012E	$00F0			MOVWF	STACK_0
$012F	$01F1			CLRF	STACK_0+1
$0130	$0872			MOVF	STACK_2, 0
$0131	$	L_Adc_Read_2:
$0131	$1903			BTFSC	STATUS, Z
$0132	$2938			GOTO	L_Adc_Read_3
$0133	$0DF0			RLF	STACK_0, 1
$0134	$0DF1			RLF	STACK_0+1, 1
$0135	$1070			BCF	STACK_0, 0
$0136	$3FFF			ADDLW	255
$0137	$2931			GOTO	L_Adc_Read_2
$0138	$	L_Adc_Read_3:
$0138	$1683			BSF	STATUS, RP0
$0139	$081E			MOVF	ADRESL, 0
$013A	$04F0			IORWF	STACK_0, 1
$013B	$3000			MOVLW	0
$013C	$04F1			IORWF	STACK_0+1, 1
$013D	$0008			RETURN
$00D7	$	_PWM1_Change_Duty:
$00D7	$1303			BCF	STATUS, RP1
$00D8	$1683			BSF	STATUS, RP0
$00D9	$0812			MOVF	PR2, 0
$00DA	$3F01			ADDLW	1
$00DB	$00F0			MOVWF	STACK_0
$00DC	$01F1			CLRF	STACK_0+1
$00DD	$1803			BTFSC	STATUS, C
$00DE	$0AF1			INCF	STACK_0+1, 1
$00DF	$1283			BCF	STATUS, RP0
$00E0	$0826			MOVF	FARG_PWM1_Change_Duty+0, 0
$00E1	$00F4			MOVWF	STACK_4
$00E2	$01F5			CLRF	STACK_4+1
$00E3	$2054			CALL	_mul_16x16_s
$00E4	$3006			MOVLW	6
$00E5	$00F2			MOVWF	STACK_2
$00E6	$0870			MOVF	STACK_0, 0
$00E7	$00F4			MOVWF	STACK_4
$00E8	$0871			MOVF	STACK_0+1, 0
$00E9	$00F5			MOVWF	STACK_4+1
$00EA	$0872			MOVF	STACK_2, 0
$00EB	$	L_PWM1_Change_Duty_2:
$00EB	$1903			BTFSC	STATUS, Z
$00EC	$28F2			GOTO	L_PWM1_Change_Duty_3
$00ED	$0CF5			RRF	STACK_4+1, 1
$00EE	$0CF4			RRF	STACK_4, 1
$00EF	$13F5			BCF	STACK_4+1, 7
$00F0	$3FFF			ADDLW	255
$00F1	$28EB			GOTO	L_PWM1_Change_Duty_2
$00F2	$	L_PWM1_Change_Duty_3:
$00F2	$0874			MOVF	STACK_4, 0
$00F3	$00F0			MOVWF	STACK_0
$00F4	$0DF0			RLF	STACK_0, 1
$00F5	$1070			BCF	STACK_0, 0
$00F6	$0DF0			RLF	STACK_0, 1
$00F7	$1070			BCF	STACK_0, 0
$00F8	$0DF0			RLF	STACK_0, 1
$00F9	$1070			BCF	STACK_0, 0
$00FA	$0DF0			RLF	STACK_0, 1
$00FB	$1070			BCF	STACK_0, 0
$00FC	$3030			MOVLW	48
$00FD	$0570			ANDWF	STACK_0, 0
$00FE	$00F3			MOVWF	STACK_3
$00FF	$0874			MOVF	STACK_4, 0
$0100	$00F0			MOVWF	STACK_0
$0101	$0875			MOVF	STACK_4+1, 0
$0102	$00F1			MOVWF	STACK_0+1
$0103	$0CF1			RRF	STACK_0+1, 1
$0104	$0CF0			RRF	STACK_0, 1
$0105	$13F1			BCF	STACK_0+1, 7
$0106	$0CF1			RRF	STACK_0+1, 1
$0107	$0CF0			RRF	STACK_0, 1
$0108	$13F1			BCF	STACK_0+1, 7
$0109	$0870			MOVF	STACK_0, 0
$010A	$0095			MOVWF	CCPR1L
$010B	$300F			MOVLW	15
$010C	$0597			ANDWF	CCP1CON, 1
$010D	$0873			MOVF	STACK_3, 0
$010E	$0497			IORWF	CCP1CON, 1
$010F	$0008			RETURN
$009E	$	_PWM2_Change_Duty:
$009E	$1303			BCF	STATUS, RP1
$009F	$1683			BSF	STATUS, RP0
$00A0	$0812			MOVF	PR2, 0
$00A1	$3F01			ADDLW	1
$00A2	$00F0			MOVWF	STACK_0
$00A3	$01F1			CLRF	STACK_0+1
$00A4	$1803			BTFSC	STATUS, C
$00A5	$0AF1			INCF	STACK_0+1, 1
$00A6	$1283			BCF	STATUS, RP0
$00A7	$0826			MOVF	FARG_PWM2_Change_Duty+0, 0
$00A8	$00F4			MOVWF	STACK_4
$00A9	$01F5			CLRF	STACK_4+1
$00AA	$2054			CALL	_mul_16x16_s
$00AB	$3006			MOVLW	6
$00AC	$00F2			MOVWF	STACK_2
$00AD	$0870			MOVF	STACK_0, 0
$00AE	$00F4			MOVWF	STACK_4
$00AF	$0871			MOVF	STACK_0+1, 0
$00B0	$00F5			MOVWF	STACK_4+1
$00B1	$0872			MOVF	STACK_2, 0
$00B2	$	L_PWM2_Change_Duty_0:
$00B2	$1903			BTFSC	STATUS, Z
$00B3	$28B9			GOTO	L_PWM2_Change_Duty_1
$00B4	$0CF5			RRF	STACK_4+1, 1
$00B5	$0CF4			RRF	STACK_4, 1
$00B6	$13F5			BCF	STACK_4+1, 7
$00B7	$3FFF			ADDLW	255
$00B8	$28B2			GOTO	L_PWM2_Change_Duty_0
$00B9	$	L_PWM2_Change_Duty_1:
$00B9	$0874			MOVF	STACK_4, 0
$00BA	$00F0			MOVWF	STACK_0
$00BB	$0DF0			RLF	STACK_0, 1
$00BC	$1070			BCF	STACK_0, 0
$00BD	$0DF0			RLF	STACK_0, 1
$00BE	$1070			BCF	STACK_0, 0
$00BF	$0DF0			RLF	STACK_0, 1
$00C0	$1070			BCF	STACK_0, 0
$00C1	$0DF0			RLF	STACK_0, 1
$00C2	$1070			BCF	STACK_0, 0
$00C3	$3030			MOVLW	48
$00C4	$0570			ANDWF	STACK_0, 0
$00C5	$00F3			MOVWF	STACK_3
$00C6	$0874			MOVF	STACK_4, 0
$00C7	$00F0			MOVWF	STACK_0
$00C8	$0875			MOVF	STACK_4+1, 0
$00C9	$00F1			MOVWF	STACK_0+1
$00CA	$0CF1			RRF	STACK_0+1, 1
$00CB	$0CF0			RRF	STACK_0, 1
$00CC	$13F1			BCF	STACK_0+1, 7
$00CD	$0CF1			RRF	STACK_0+1, 1
$00CE	$0CF0			RRF	STACK_0, 1
$00CF	$13F1			BCF	STACK_0+1, 7
$00D0	$0870			MOVF	STACK_0, 0
$00D1	$009B			MOVWF	CCPR2L
$00D2	$300F			MOVLW	15
$00D3	$059D			ANDWF	CCP2CON, 1
$00D4	$0873			MOVF	STACK_3, 0
$00D5	$049D			IORWF	CCP2CON, 1
$00D6	$0008			RETURN
$013E	$	_InitMicro:
;SVDrPIC.c,17 :: 		void InitMicro() {              // Function: Initialize Device
;SVDrPIC.c,19 :: 		ADCON1 = 0x80;                // Configure analog inputs and Vref
$013E	$3080			MOVLW	128
$013F	$1303			BCF	STATUS, RP1
$0140	$1683			BSF	STATUS, RP0
$0141	$009F			MOVWF	ADCON1
;SVDrPIC.c,20 :: 		TRISA  = 0xFF;                // PORTA is input
$0142	$30FF			MOVLW	255
$0143	$0085			MOVWF	TRISA
;SVDrPIC.c,22 :: 		PORTB = 0;                    // set PORTB to 0
$0144	$1283			BCF	STATUS, RP0
$0145	$0186			CLRF	PORTB, 1
;SVDrPIC.c,23 :: 		TRISB = 0;                    // designate PORTB pins as output
$0146	$1683			BSF	STATUS, RP0
$0147	$0186			CLRF	TRISB, 1
;SVDrPIC.c,25 :: 		PORTD  = 0;                   // set PORTD to 0
$0148	$1283			BCF	STATUS, RP0
$0149	$0188			CLRF	PORTD, 1
;SVDrPIC.c,26 :: 		TRISD  = 0;                   // designate PORTB pins as output
$014A	$1683			BSF	STATUS, RP0
$014B	$0188			CLRF	TRISD, 1
;SVDrPIC.c,28 :: 		PORTC = 0;                    // set PORTC to 0
$014C	$1283			BCF	STATUS, RP0
$014D	$0187			CLRF	PORTC, 1
;SVDrPIC.c,29 :: 		TRISC = 0;                    // designate PORTC pins as output
$014E	$1683			BSF	STATUS, RP0
$014F	$0187			CLRF	TRISC, 1
;SVDrPIC.c,31 :: 		PWM1_Init(PWM_FREQUENCY);     // Initialize PWM1 module at 1KHz
$0150	$1283			BCF	STATUS, RP0
$0151	$1012			BCF	T2CON, T2CKPS0
$0152	$1092			BCF	T2CON, T2CKPS1
$0153	$1412			BSF	T2CON, T2CKPS0
$0154	$1492			BSF	T2CON, T2CKPS1
$0155	$30F9			MOVLW	249
$0156	$1683			BSF	STATUS, RP0
$0157	$0092			MOVWF	PR2
$0158	$21BE			CALL	_PWM1_Init
;SVDrPIC.c,32 :: 		PWM2_Init(PWM_FREQUENCY);     // Initialize PWM2 module at 1KHz
$0159	$1012			BCF	T2CON, T2CKPS0
$015A	$1092			BCF	T2CON, T2CKPS1
$015B	$1412			BSF	T2CON, T2CKPS0
$015C	$1492			BSF	T2CON, T2CKPS1
$015D	$30F9			MOVLW	249
$015E	$1683			BSF	STATUS, RP0
$015F	$0092			MOVWF	PR2
$0160	$21B8			CALL	_PWM2_Init
;SVDrPIC.c,34 :: 		current_duty_1  = 0;            // initial value for current_duty 1
$0161	$01A0			CLRF	_current_duty_1, 1
;SVDrPIC.c,35 :: 		old_duty_1      = 0;            // initial value for old_duty 1
$0162	$01A1			CLRF	_old_duty_1, 1
;SVDrPIC.c,36 :: 		current_duty_2  = 0;            // initial value for current_duty 2
$0163	$01A2			CLRF	_current_duty_2, 1
;SVDrPIC.c,37 :: 		old_duty_2      = 0;            // initial value for old_duty 2
$0164	$01A3			CLRF	_old_duty_2, 1
;SVDrPIC.c,38 :: 		temp_res        = 0;            // initial value for temp_res
$0165	$01A4			CLRF	_temp_res
$0166	$01A5			CLRF	_temp_res+1
;SVDrPIC.c,39 :: 		}
$0167	$0008			RETURN
$01B0	$	_PWM1_Start:
$01B0	$1303			BCF	STATUS, RP1
$01B1	$1683			BSF	STATUS, RP0
$01B2	$1107			BCF	TRISC, 2
$01B3	$1283			BCF	STATUS, RP0
$01B4	$1512			BSF	T2CON, 2
$01B5	$300C			MOVLW	12
$01B6	$0497			IORWF	CCP1CON, 1
$01B7	$0008			RETURN
$01A8	$	_PWM2_Start:
$01A8	$1303			BCF	STATUS, RP1
$01A9	$1683			BSF	STATUS, RP0
$01AA	$1087			BCF	TRISC, 1
$01AB	$1283			BCF	STATUS, RP0
$01AC	$1512			BSF	T2CON, 2
$01AD	$300C			MOVLW	12
$01AE	$049D			IORWF	CCP2CON, 1
$01AF	$0008			RETURN
$0168	$	_ChargePump:
;SVDrPIC.c,43 :: 		void ChargePump() {
;SVDrPIC.c,45 :: 		PORTB = 0b00000000;
$0168	$1303			BCF	STATUS, RP1
$0169	$1283			BCF	STATUS, RP0
$016A	$0186			CLRF	PORTB, 1
;SVDrPIC.c,46 :: 		Delay_us(PUMP_OFF_TIME);
$016B	$3021			MOVLW	33
$016C	$00FA			MOVWF	STACK_10
$016D	$0BFA			DECFSZ	STACK_10, F
$016E	$296D			GOTO	$-1
;SVDrPIC.c,48 :: 		PORTB = 0b00001111;
$016F	$300F			MOVLW	15
$0170	$0086			MOVWF	PORTB
;SVDrPIC.c,49 :: 		Delay_us(PUMP_ON_TIME);
$0171	$3002			MOVLW	2
$0172	$00FB			MOVWF	STACK_11
$0173	$30FF			MOVLW	255
$0174	$00FA			MOVWF	STACK_10
$0175	$0BFB			DECFSZ	STACK_11, F
$0176	$2978			GOTO	$+2
$0177	$297B			GOTO	$+4
$0178	$0BFA			DECFSZ	STACK_10, F
$0179	$2978			GOTO	$-1
$017A	$2975			GOTO	$-5
$017B	$308C			MOVLW	140
$017C	$00FA			MOVWF	STACK_10
$017D	$0BFA			DECFSZ	STACK_10, F
$017E	$297D			GOTO	$-1
$017F	$0000			NOP
$0180	$0000			NOP
;SVDrPIC.c,51 :: 		PORTB = 0b00000000;
$0181	$0186			CLRF	PORTB, 1
;SVDrPIC.c,52 :: 		Delay_us(PUMP_OFF_TIME);
$0182	$3021			MOVLW	33
$0183	$00FA			MOVWF	STACK_10
$0184	$0BFA			DECFSZ	STACK_10, F
$0185	$2984			GOTO	$-1
;SVDrPIC.c,54 :: 		PORTB = 0b11110000;
$0186	$30F0			MOVLW	240
$0187	$0086			MOVWF	PORTB
;SVDrPIC.c,55 :: 		Delay_us(PUMP_ON_TIME - 120);
$0188	$3002			MOVLW	2
$0189	$00FB			MOVWF	STACK_11
$018A	$30FF			MOVLW	255
$018B	$00FA			MOVWF	STACK_10
$018C	$0BFB			DECFSZ	STACK_11, F
$018D	$298F			GOTO	$+2
$018E	$2992			GOTO	$+4
$018F	$0BFA			DECFSZ	STACK_10, F
$0190	$298F			GOTO	$-1
$0191	$298C			GOTO	$-5
$0192	$303C			MOVLW	60
$0193	$00FA			MOVWF	STACK_10
$0194	$0BFA			DECFSZ	STACK_10, F
$0195	$2994			GOTO	$-1
$0196	$0000			NOP
$0197	$0000			NOP
;SVDrPIC.c,56 :: 		}
$0198	$0008			RETURN
$0004	$	_ReadToPWM:
;SVDrPIC.c,60 :: 		void ReadToPWM() {
;SVDrPIC.c,62 :: 		temp_res = ADC_Read(1);         // Get 10-bit results of AD conversion
$0004	$3001			MOVLW	1
$0005	$1303			BCF	STATUS, RP1
$0006	$1283			BCF	STATUS, RP0
$0007	$00A6			MOVWF	FARG_Adc_Read+0
$0008	$2110			CALL	_Adc_Read
$0009	$0870			MOVF	STACK_0, 0
$000A	$1283			BCF	STATUS, RP0
$000B	$00A4			MOVWF	_temp_res
$000C	$0871			MOVF	STACK_0+1, 0
$000D	$00A5			MOVWF	_temp_res+1
;SVDrPIC.c,64 :: 		if (temp_res < 512) {
$000E	$3002			MOVLW	2
$000F	$0271			SUBWF	STACK_0+1, 0
$0010	$1D03			BTFSS	STATUS, Z
$0011	$2814			GOTO	L_ReadToPWM_6
$0012	$3000			MOVLW	0
$0013	$0270			SUBWF	STACK_0, 0
$0014	$	L_ReadToPWM_6:
$0014	$1803			BTFSC	STATUS, C
$0015	$282C			GOTO	L_ReadToPWM_0
;SVDrPIC.c,65 :: 		current_duty_1 = (512 - temp_res) / 2;
$0016	$0824			MOVF	_temp_res, 0
$0017	$3C00			SUBLW	0
$0018	$00F0			MOVWF	STACK_0
$0019	$0825			MOVF	_temp_res+1, 0
$001A	$1C03			BTFSS	STATUS, C
$001B	$3F01			ADDLW	1
$001C	$3C02			SUBLW	2
$001D	$00F1			MOVWF	STACK_0+1
$001E	$3001			MOVLW	1
$001F	$00F4			MOVWF	STACK_4
$0020	$0874			MOVF	STACK_4, 0
$0021	$	L_ReadToPWM_7:
$0021	$1903			BTFSC	STATUS, Z
$0022	$2828			GOTO	L_ReadToPWM_8
$0023	$0CF1			RRF	STACK_0+1, 1
$0024	$0CF0			RRF	STACK_0, 1
$0025	$13F1			BCF	STACK_0+1, 7
$0026	$3FFF			ADDLW	255
$0027	$2821			GOTO	L_ReadToPWM_7
$0028	$	L_ReadToPWM_8:
$0028	$0870			MOVF	STACK_0, 0
$0029	$00A0			MOVWF	_current_duty_1
;SVDrPIC.c,66 :: 		current_duty_2 = 0;
$002A	$01A2			CLRF	_current_duty_2, 1
;SVDrPIC.c,67 :: 		} else {
$002B	$2841			GOTO	L_ReadToPWM_1
$002C	$	L_ReadToPWM_0:
;SVDrPIC.c,68 :: 		current_duty_1 = 0;
$002C	$01A0			CLRF	_current_duty_1, 1
;SVDrPIC.c,69 :: 		current_duty_2 = (temp_res - 512) / 2;
$002D	$3000			MOVLW	0
$002E	$0224			SUBWF	_temp_res, 0
$002F	$00F0			MOVWF	STACK_0
$0030	$3002			MOVLW	2
$0031	$1C03			BTFSS	STATUS, C
$0032	$3F01			ADDLW	1
$0033	$0225			SUBWF	_temp_res+1, 0
$0034	$00F1			MOVWF	STACK_0+1
$0035	$3001			MOVLW	1
$0036	$00F4			MOVWF	STACK_4
$0037	$0874			MOVF	STACK_4, 0
$0038	$	L_ReadToPWM_9:
$0038	$1903			BTFSC	STATUS, Z
$0039	$283F			GOTO	L_ReadToPWM_10
$003A	$0CF1			RRF	STACK_0+1, 1
$003B	$0CF0			RRF	STACK_0, 1
$003C	$13F1			BCF	STACK_0+1, 7
$003D	$3FFF			ADDLW	255
$003E	$2838			GOTO	L_ReadToPWM_9
$003F	$	L_ReadToPWM_10:
$003F	$0870			MOVF	STACK_0, 0
$0040	$00A2			MOVWF	_current_duty_2
;SVDrPIC.c,70 :: 		}
$0041	$	L_ReadToPWM_1:
;SVDrPIC.c,72 :: 		if (old_duty_1 != current_duty_1) {  // if change in duty cycle requested
$0041	$0821			MOVF	_old_duty_1, 0
$0042	$0620			XORWF	_current_duty_1, 0
$0043	$1903			BTFSC	STATUS, Z
$0044	$284A			GOTO	L_ReadToPWM_2
;SVDrPIC.c,73 :: 		PWM1_Change_Duty(current_duty_1);  //    set new duty ratio,
$0045	$0820			MOVF	_current_duty_1, 0
$0046	$00A6			MOVWF	FARG_PWM1_Change_Duty+0
$0047	$20D7			CALL	_PWM1_Change_Duty
;SVDrPIC.c,74 :: 		old_duty_1 = current_duty_1;       //    memorize it
$0048	$0820			MOVF	_current_duty_1, 0
$0049	$00A1			MOVWF	_old_duty_1
;SVDrPIC.c,75 :: 		}
$004A	$	L_ReadToPWM_2:
;SVDrPIC.c,77 :: 		if (old_duty_2 != current_duty_2) {  // if change in duty cycle requested
$004A	$0823			MOVF	_old_duty_2, 0
$004B	$0622			XORWF	_current_duty_2, 0
$004C	$1903			BTFSC	STATUS, Z
$004D	$2853			GOTO	L_ReadToPWM_3
;SVDrPIC.c,78 :: 		PWM2_Change_Duty(current_duty_2);  //    set new duty ratio,
$004E	$0822			MOVF	_current_duty_2, 0
$004F	$00A6			MOVWF	FARG_PWM2_Change_Duty+0
$0050	$209E			CALL	_PWM2_Change_Duty
;SVDrPIC.c,79 :: 		old_duty_2 = current_duty_2;       //    memorize it
$0051	$0822			MOVF	_current_duty_2, 0
$0052	$00A3			MOVWF	_old_duty_2
;SVDrPIC.c,80 :: 		}
$0053	$	L_ReadToPWM_3:
;SVDrPIC.c,81 :: 		}
$0053	$0008			RETURN
$0199	$	_main:
;SVDrPIC.c,85 :: 		void main() {
;SVDrPIC.c,87 :: 		InitMicro();
$0199	$213E			CALL	_InitMicro
;SVDrPIC.c,88 :: 		PWM1_Start();                   // start PWM1
$019A	$21B0			CALL	_PWM1_Start
;SVDrPIC.c,89 :: 		PWM2_Start();                   // start PWM2
$019B	$21A8			CALL	_PWM2_Start
;SVDrPIC.c,91 :: 		do {                            // Infinite Loop
$019C	$	L_main_4:
;SVDrPIC.c,92 :: 		ChargePump();
$019C	$2168			CALL	_ChargePump
;SVDrPIC.c,93 :: 		ReadToPWM();
$019D	$2004			CALL	_ReadToPWM
;SVDrPIC.c,94 :: 		} while(1);
$019E	$299C			GOTO	L_main_4
;SVDrPIC.c,95 :: 		}
$019F	$299F			GOTO	$


//** Procedures locations **
//ADDRESS		PROCEDURE
//----------------------------------------------
$0004		ReadToPWM
$0054		Mul_16x16_S
$009E		PWM2_Change_Duty
$00D7		PWM1_Change_Duty
$0110		Adc_Read
$013E		InitMicro
$0168		ChargePump
$0199		main
$01A0		Delay_22us
$01A8		PWM2_Start
$01B0		PWM1_Start
$01B8		PWM2_Init
$01BE		PWM1_Init


//** Labels locations **
//ADDRESS		LABEL
//----------------------------------------------
$0004		_ReadToPWM:
$0014		L_ReadToPWM_6:
$0021		L_ReadToPWM_7:
$0028		L_ReadToPWM_8:
$002C		L_ReadToPWM_0:
$0038		L_ReadToPWM_9:
$003F		L_ReadToPWM_10:
$0041		L_ReadToPWM_1:
$004A		L_ReadToPWM_2:
$0053		L_ReadToPWM_3:
$0054		_Mul_16x16_S:
$009E		_PWM2_Change_Duty:
$00B2		L_PWM2_Change_Duty_0:
$00B9		L_PWM2_Change_Duty_1:
$00D7		_PWM1_Change_Duty:
$00EB		L_PWM1_Change_Duty_2:
$00F2		L_PWM1_Change_Duty_3:
$0110		_Adc_Read:
$0126		L_Adc_Read_0:
$012A		L_Adc_Read_1:
$0131		L_Adc_Read_2:
$0138		L_Adc_Read_3:
$013E		_InitMicro:
$0168		_ChargePump:
$0199		_main:
$019C		L_main_4:
$01A0		_Delay_22us:
$01A8		_PWM2_Start:
$01B0		_PWM1_Start:
$01B8		_PWM2_Init:
$01BE		_PWM1_Init:


//** Variables locations **
//ADDRESS		VARIABLE
//----------------------------------------------
$0000		INDF
$0002		PCL
$0003		STATUS
$0004		FSR
$0006		PORTB
$0007		PORTC
$0008		PORTD
$000A		PCLATH
$0012		T2CON
$0015		CCPR1L
$0017		CCP1CON
$001B		CCPR2L
$001D		CCP2CON
$001E		ADRESH
$001F		ADCON0
$0020		_current_duty_1
$0021		_old_duty_1
$0022		_current_duty_2
$0023		_old_duty_2
$0024		_temp_res
$0026		FARG_Adc_Read+0
$0026		FARG_PWM1_Change_Duty+0
$0026		FARG_PWM1_Init+0
$0026		FARG_PWM2_Change_Duty+0
$0026		FARG_PWM2_Init+0
$0070		STACK_0
$0071		STACK_1
$0072		STACK_2
$0073		STACK_3
$0074		STACK_4
$0075		STACK_5
$0076		STACK_6
$0077		STACK_7
$0078		STACK_8
$0079		STACK_9
$007A		STACK_10
$007B		STACK_11
$007C		STACK_12
$007D		STACK_13
$007E		STACK_14
$007F		STACK_15
$0085		TRISA
$0086		TRISB
$0087		TRISC
$0088		TRISD
$0092		PR2
$009E		ADRESL
$009F		ADCON1


